---
name: default-bare

on:
  push:
  pull_request:
  schedule:  # run weekly, every Tuesday 03:00
    - cron: '0 3 * * 2'

permissions: {}

jobs:
  build:
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]
    env:
      ANSIBLE_CALLBACKS_ENABLED: profile_tasks
      ANSIBLE_EXTRA_VARS: ""

    steps:
      - uses: actions/checkout@v4
        with:
          path: juju4.chrome_config
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install ansible-lint flake8 yamllint
          which ansible || true
          pip3 install ansible
          pip3 show ansible
          ls -l $HOME/.local/bin || true
          ls -l /opt/hostedtoolcache/Python/3.9.1/x64/bin || true
          echo "/opt/hostedtoolcache/Python/3.9.1/x64/bin" >> $GITHUB_PATH
          ansible --version
          cd $GITHUB_WORKSPACE/juju4.chrome_config
          [ -f get-dependencies.sh ] && sh -x get-dependencies.sh
          { echo '[defaults]'; echo 'callbacks_enabled = profile_tasks, timer'; echo 'roles_path = ../'; echo 'ansible_python_interpreter: /usr/bin/python3'; } >> ansible.cfg
        if: ${{ matrix.os != 'windows-latest'}}
      - name: Environment
        run: |
          pwd
          env
          find . -ls
        if: ${{ matrix.os != 'windows-latest'}}
      - name: run test
        run: |
          cd $GITHUB_WORKSPACE/juju4.chrome_config && ansible-playbook -i localhost, --connection=local --become -vvv test/integration/default/default.yml ${ANSIBLE_EXTRA_VARS}
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
        if: ${{ matrix.os != 'windows-latest'}}
      - name: idempotency run
        run: |
          cd $GITHUB_WORKSPACE/juju4.chrome_config && ansible-playbook -i localhost, --connection=local --become -vvv test/integration/default/default.yml ${ANSIBLE_EXTRA_VARS} | tee /tmp/idempotency.log | grep -q 'changed=0.*failed=0'  && (echo 'Idempotence test: pass' && exit 0)  || (echo 'Idempotence test: fail' && cat /tmp/idempotency.log && exit 0)
        if: ${{ matrix.os != 'windows-latest'}}
      - name: On failure
        run: |
          ansible -i inventory --connection=local -m setup localhost
          systemctl -l --no-pager status
          systemctl -l --no-pager --failed
          ls -l /usr/bin/ | egrep '(python|pip|ansible)'
          pip freeze
          pip3 freeze
          ip addr
          cat /etc/resolv.conf
          host www.google.com
          ping -c 1 www.google.com || true
          ping -c 1 8.8.8.8 || true
        if: ${{ failure() }} and ${{ matrix.os != 'windows-latest'}}
        continue-on-error: true
      - name: After script - linux files
        run: |
          ls -lA /usr/share/google-chrome/extensions/ || true
          cat /usr/share/google-chrome/extensions/*.json || true
          cat /etc/chromium-browser/policies/managed/*.json || true
        if: ${{ matrix.os == 'ubuntu-latest'}}
        continue-on-error: true
      - name: After script - files macos
        run: |
          cat /etc/chromium-browser/policies/managed/*.json || true
          cat '/Library/Managed Preferences/com.google.Chrome.plist' || true
          plutil -convert xml1 '/Library/Managed Preferences/com.google.Chrome.plist' || true
          cat '/Library/Managed Preferences/com.google.Chrome.plist' || true
          ls /Applications || true
          ls /Applications/Google\ Chrome.app/ || true
        if: ${{ matrix.os == 'macos-latest'}}
        continue-on-error: true
      # https://developers.google.com/web/updates/2017/04/headless-chrome
      # https://bugs.chromium.org/p/chromium/issues/detail?id=752747
      - name: After script - chrome headless - linux
        run: |
          chromium-browser --headless --screenshot=chrome.png https://www.google.com/ || true
          ls
          chromium-browser --headless --dump-dom https://www.google.com/ || true
          # chromium-browser --headless --dump-dom chrome://policy/ || true
          # chromium-browser --headless --dump-html chrome://policy/ || true
        if: ${{ matrix.os == 'ubuntu-latest'}}
        continue-on-error: true
      - name: After script - chrome headless - macos
        run: |
          export chromeapp="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
          "$chromeapp" --headless --screenshot=chrome.png https://www.google.com/ || true
          ls
          # "$chromeapp" --headless --dump-dom https://www.google.com/ || true
          # "$chromeapp" --headless --dump-dom chrome://policy/ || true
          # "$chromeapp" --headless --dump-html chrome://policy/ || true
        if: ${{ matrix.os == 'macos-latest'}}
        continue-on-error: true
